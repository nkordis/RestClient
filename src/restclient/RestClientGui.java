package restclient;

import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Nikos
 */
public class RestClientGui extends javax.swing.JFrame {

    /**
     * Creates new form RestClientGui
     */
    public RestClientGui() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        showLiveScoresButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        showArgentinaScoresButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        showTomorrowButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Rest Client");

        showLiveScoresButton.setText("Show all live scores");
        showLiveScoresButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showLiveScoresButtonActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Home", "Away", "Score(current)", "Score(half)", "Score(extra-time)", "Time", "League id", "League name", "Added", "Status", "Last changed", "Home id", "Away id"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        showArgentinaScoresButton.setText("Show Argentina's live scores");
        showArgentinaScoresButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showArgentinaScoresButtonActionPerformed(evt);
            }
        });

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Time", "Round", "Home", "Away", "Location", "League id"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(jTable2);

        showTomorrowButton.setText("Show tomorrow's live scores");
        showTomorrowButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showTomorrowButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 807, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(showTomorrowButton))
            .addGroup(layout.createSequentialGroup()
                .addComponent(showLiveScoresButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(showArgentinaScoresButton))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 245, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(showLiveScoresButton)
                    .addComponent(showArgentinaScoresButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(showTomorrowButton))
                .addGap(5, 5, 5))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void showLiveScoresButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showLiveScoresButtonActionPerformed
        RestUtilities restUtilities;
        ArrayList matches = null;
        try {
            restUtilities = new RestUtilities();
            matches = restUtilities.getLiveMatches();
        } catch (IOException ex) {
            Logger.getLogger(RestClientGui.class.getName()).log(Level.SEVERE, null, ex);
        }

        addLiveScores(matches);
    }//GEN-LAST:event_showLiveScoresButtonActionPerformed


    private void showArgentinaScoresButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showArgentinaScoresButtonActionPerformed
        RestUtilities restUtilities;
        ArrayList matches = null;
        try {
            restUtilities = new RestUtilities(65);
            matches = restUtilities.getLiveMatches();
        } catch (IOException ex) {
            Logger.getLogger(RestClientGui.class.getName()).log(Level.SEVERE, null, ex);
        }

        addLiveScores(matches);
    }//GEN-LAST:event_showArgentinaScoresButtonActionPerformed

    private void showTomorrowButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showTomorrowButtonActionPerformed
        Calendar calendar = Calendar.getInstance();
        calendar.add(Calendar.DAY_OF_YEAR, 1);
        Date date = calendar.getTime();
        String pattern_date = "yyyy-MM-dd";
        SimpleDateFormat simpleDateFormat = new SimpleDateFormat(pattern_date);
        String datef = simpleDateFormat.format(date); 
        RestUtilities restUtilities;
        ArrayList fixtures = null;
        try {
            restUtilities = new RestUtilities(datef);
            fixtures = restUtilities.getFixtures(); System.out.println(fixtures);
        } catch (IOException | ParseException ex) {
            Logger.getLogger(RestClientGui.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        addFixtures(fixtures);
    }//GEN-LAST:event_showTomorrowButtonActionPerformed
 
    private void addLiveScores(ArrayList matches) {
        Match match;
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0);
        Vector row;
        for (int i = 0; i < matches.size(); i++) {

            match = (Match) matches.get(i);
            row = new Vector();
            row.add(match.getId());
            row.add(match.getHome_name());
            row.add(match.getAway_name());
            row.add(match.getScore());
            row.add(match.getHt_score());
            row.add(match.getFt_score());
            row.add(match.getTime());
            row.add(match.getLeague_id());
            row.add(match.getLeague_name());
            row.add(match.getStatus());
            row.add(match.getAdded());
            row.add(match.getLast_changed());
            row.add(match.getHome_id());
            row.add(match.getAway_id());
            model.addRow(row);
        }
    }
    
     private void addFixtures(ArrayList fixtures) {
         Fixture fixture;
         DefaultTableModel model = (DefaultTableModel) jTable2.getModel();
         model.setRowCount(0);
         Vector row;
         for (int i = 0; i < fixtures.size(); i++) {
             
             fixture = (Fixture)fixtures.get(i);
             row = new Vector();
             row.add(fixture.getId());
             row.add(fixture.getTime());
             row.add(fixture.getRound());
             row.add(fixture.getHome_name());
             row.add(fixture.getAway_name());
             row.add(fixture.getLocation());
             row.add(fixture.getLeague_id());
             model.addRow(row);
         }
    }
    

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RestClientGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RestClientGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RestClientGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RestClientGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new RestClientGui().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JButton showArgentinaScoresButton;
    private javax.swing.JButton showLiveScoresButton;
    private javax.swing.JButton showTomorrowButton;
    // End of variables declaration//GEN-END:variables


}
